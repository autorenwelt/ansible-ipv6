---

- name: ensure ipv6 module loaded
  modprobe: name=ipv6 state=present
  when: >
    not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker")
        )

- name: harden ipv6 sysctl config - network
  sysctl:
    name: "{{ item.n }}"
    value: "{{ item.v }}"
    sysctl_set: yes
    state: present
    reload: yes
  with_items: "{{ ipv6_harden_settings }}"
  when: >
    not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

## if it was disabled before, need to ensure settings are revert
- name: Ensure IPv6 not disabled with sysctl
  sysctl: name={{ item }} value=0 state=present
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6
  when: >
    not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- name: Debian | unblacklist ipv6 in modprobe
  lineinfile: "dest=/etc/modprobe.d/blacklist.conf line='blacklist ipv6' state=absent"
  notify:
    - modipv6
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: RedHat | no placeholder true for ipv6 in modprobe
  lineinfile:
    dest: /etc/modprobe.conf
    line: 'install ipv6 /bin/true'
    state: absent
  notify:
    - modipv6
  when: ansible_distribution == 'Redhat' or ansible_distribution == 'CentOS'

- name: RedHat | unsure ipv6 not disabled in sysconfig/network
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: "^{{ item.regexp }}"
    line: "{{ item.line }}"
    mode: '0644'
    create: yes
  with_items:
    - { regexp: 'NETWORKING_IPV6=.*', line: 'NETWORKING_IPV6=YES' }
    - { regexp: 'IPV6INIT=.*', line: 'IPV6INIT=yes' }
  notify:
    - restart network
    - restart NetworkManager
  when: ansible_distribution == 'Redhat' or ansible_distribution == 'CentOS'
